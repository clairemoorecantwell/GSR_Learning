# prefixType: prefix stressed or not?
# finalOnset: CV transcription of the onset of the final syllable
# finalV: final vowel of the word
# penultStress: stress of the penult
# codaLength: how many phonemes in the final syllable's coda?
# coda: coda of the final syllable
# freq: log frequency from SubtLex
# POS: part of speech from CELEX
# nsylls: number of syllables
# weightPattern: Weight pattern of the last three syllables (NA in first position indicates a two syllable word)
# leftEdgeStress: 1 means initial stress, 2=peninitial, 3=postpeninitial, etc.
# initStress: stress of initial syllable
# singleStress: 1=word has only one stressed syllable, 0=word has at least two stressed syllables
# penultVowel: D=diphthong, M=monophthong
# penultCoda: closed, cluster, or open
# penultPossibleCoda: mayHaveCoda=penult ends in a singleton or cluster, or is followed by an onset cluster in the next syllable (which could be attracted to the penult as a coda should the penult be stressed)
# finalComplexOnset: is the onset of the final syllable complex?
# penultHeaviness: weight of penult syllable
# finalTwoV: final vowel divided into -i, -ah, and other
# finalVowel: D=diphthong, M=monophthong
# finalCoda: closed, cluster, or open
# finalHeaviness: weight of final syllable
# antepenultVowel: D=diphthong, M=monophthong
# antepenultCoda: closed, cluster, or open
# antepenultHeaviness: weight of antepenult
# final3stressTrans: stress of the final three syllables
######################################################
# Example of possible use:
#
# Question: how does syllable weight affect main stress placement?
table(data$weightPattern,data$mainStress)
table(data$weightPattern,data$final3stressTrans)
# In words at least three syllables long?
x=table(data$weightPattern[data$nsylls>2&grepl("NA",data$weightPattern)==FALSE],data$mainStress[data$nsylls>2&grepl("NA",data$weightPattern)==FALSE],exclude="other")
# List all HHL words with antepenult stress
data$spelling[data$weightPattern=="H H L"&data$mainStress=="antepenult"]
table(data$weightPattern,data$final3stressTrans)
436/(436+128)
table(data$weightPattern[nsylls>3],data$final3stressTrans[nsylls>3])
table(data$weightPattern[data$nsylls>3],data$final3stressTrans[data$nsylls>3])
table(data$weightPattern[data$nsylls>3],data$final3stressTrans[data$nsylls>3],data$finalV[data$nsylls>3])
table(data$weightPattern[data$nsylls>3&data$finalV=='iy'],data$final3stressTrans[data$nsylls>3&data$finalV=='iy'])
data=read.table("C:\\Users\\clairemoore-cantwell\\Dropbox\\Projects_finished\\CanadaBanana\\CorpusSearch\\newCMU.txt",header=TRUE,colClasses=c('factor'),sep='\t')
data=read.table("C:\\Users\\moore-cantwell\\Dropbox\\Projects_finished\\CanadaBanana\\CorpusSearch\\newCMU.txt",header=TRUE,colClasses=c('factor'),sep='\t')
data$freq=as.numeric(levels(data$freq))[data$freq]
data$nsylls=sapply(as.character(data$stressTrans),nchar)
data$weightPattern=paste(data$penultWeight,data$finalWeight)
data$weightPattern=as.factor(data$weightPattern)
data$mainStress=factor(data$mainStress,levels=c("other","preante","antepenult","penult","final"),ordered=TRUE)
data$leftEdgeStress=sapply(data$stressTrans,function(v){
regexpr("1",as.character(v))[1]
})
data$initStress=substring(data$stressTrans,1,1)
data$singleStress=ifelse(grepl("2",data$stressTrans),0,1)
data$penultVowel[data$penultWeight!='other']=ifelse((data$penultWeight[data$penultWeight!='other'] %in% c("-LC","-LCC","-V")),"M","D")
data$penultCoda[data$penultWeight!='other']=ifelse((data$penultWeight[data$penultWeight!='other'] %in% c("-V","-VV")),"open",ifelse((data$penultWeight[data$penultWeight!='other'] %in% c("-LC","-TC")),"closed","cluster"))
data$penultCoda=as.factor(data$penultCoda)
data$penultVowel=as.factor(data$penultVowel)
data$penultPossibleCoda[data$penultWeight!='other']=ifelse((data$penultWeight[data$penultWeight!='other'] %in% c("-LC","-LCC","-TC","-TCC"))|(data$finalOnset[data$penultWeight!='other'] %in% c("CC","CCC")),"mayHaveCoda","noCoda")
data$penultPossibleCoda=as.factor(data$penultPossibleCoda)
data$finalComplexOnset=ifelse((data$finalOnset %in% c("CC","CCC")),"complex","simple")
data$finalComplexOnset=as.factor(data$finalComplexOnset)
#including tapestry words
#data$penultHeaviness=ifelse(data$penultPossibleCoda=='mayHaveCoda'|data$penultVowel=="D","H","L")
#data$penultHeaviness=as.factor(data$penultHeaviness)
#excluding tapestry words, including digestive words
#data$penultHeaviness=ifelse((data$penultPossibleCoda=='mayHaveCoda'&data$mainStress=='penult')|data$penultVowel=="D"|data$penultCoda=='closed'|data$penultCoda=='cluster',"H","L")
#data$penultHeaviness=as.factor(data$penultHeaviness)
#excluding tapestry words and digestive words
data$penultHeaviness=ifelse(data$penultVowel=="D"|data$penultCoda=='closed'|data$penultCoda=='cluster',"H","L")
data$penultHeaviness=as.factor(data$penultHeaviness)
data$finalTwoV=ifelse(data$finalV=='iy','iy',ifelse(data$finalV=='ah'|data$finalV=='ih','ah','other'))
data$finalVowel[data$finalWeight!='other']=ifelse((data$finalWeight[data$finalWeight!='other'] %in% c("-LC","-LCC","-V")),"M","D")
data$finalCoda[data$finalWeight!='other']=ifelse((data$finalWeight[data$finalWeight!='other'] %in% c("-V","-VV")),"open",ifelse((data$finalWeight[data$finalWeight!='other'] %in% c("-LC","-TC")),"closed","cluster"))
data$penultCoda=as.factor(data$penultCoda)
data$penultVowel=as.factor(data$penultVowel)
data$finalHeaviness=ifelse(data$finalVowel=="D"|data$finalCoda=='cluster',"H","L")
data$finalHeaviness=as.factor(data$finalHeaviness)
data$antepenultVowel[data$antepenultWeight!='other']=ifelse((data$antepenultWeight[data$antepenultWeight!='other'] %in% c("-LC","-LCC","-V")),"M","D")
data$antepenultCoda[data$antepenultWeight!='other']=ifelse((data$antepenultWeight[data$antepenultWeight!='other'] %in% c("-V","-VV")),"open",ifelse((data$antepenultWeight[data$antepenultWeight!='other'] %in% c("-LC","-TC")),"closed","cluster"))
data$penultCoda=as.factor(data$penultCoda)
data$penultVowel=as.factor(data$penultVowel)
data$antepenultHeaviness=ifelse(data$antepenultVowel=="D"|data$antepenultCoda=='closed'|data$antepenultCoda=='cluster',"H","L")
data$antepenultHeaviness=as.factor(data$antepenultHeaviness)
data$weightPattern=paste(data$antepenultHeaviness,data$penultHeaviness,data$finalHeaviness)
sapply(as.character(data$stressTrans),nchar)
final3<- function(string){
last3=substr(string,nchar(string)-2,nchar(string))
last3
}
data$final3stressTrans=as.factor(sapply(as.character(data$stressTrans),final3))
######################################################
########## Finished making new columns ###############
######################################################
summary(data)
# spelling
# transcription: CMU transcription
# stressTrans: CMU stress transcription
#				Here and elsewhere: 1=primary, 2=secondary, 0=no stress
# syllStruct: CV transcription of each syllable, separated by .'s.  L means lax vowel, T means tense
# syllabification: syllabification according to Maximal Onset.  Capitals are nucleii
# antepenultOnset: CV transcription of the onset of the antepenult syllable
# apStress: stress of the antepenult syllable
# penultHLweight: obsolete
# preantepenultHLweight: weight of the preantepenult
# finalHLweight: obsolete
# morphology: simple=morphologically simple; complex=morphologically complex
# vowelLength: mystery
# preantepenultWeight: weight of preantepenult broken down by rhyme type L is the same as V, and T is the same as V
# antepenultWeight: weight of antepenult broken down by rhyme type L is the same as V, and T is the same as V
# mainStress: location of the main stress of the word
# finalStress: stress of final syllable
# papStress: stress of preantepenult
# penultOnset: CV transcription of the penult onset
# suffixType: stress-shift type of the suffix
# penultWeight: weight of penult broken down by rhyme type L is the same as V, and T is the same as V
# antepenultHLweight: obsolete
# S: does the word's final cluster have an s in it?
# finalWeight: weight of final syllable broken down by rhyme type L is the same as V, and T is the same as V
# Suffix: is there a suffix?
# finalC: what's the final coda like?
# Prefix: prefix or not?
# prefixType: prefix stressed or not?
# finalOnset: CV transcription of the onset of the final syllable
# finalV: final vowel of the word
# penultStress: stress of the penult
# codaLength: how many phonemes in the final syllable's coda?
# coda: coda of the final syllable
# freq: log frequency from SubtLex
# POS: part of speech from CELEX
# nsylls: number of syllables
# weightPattern: Weight pattern of the last three syllables (NA in first position indicates a two syllable word)
# leftEdgeStress: 1 means initial stress, 2=peninitial, 3=postpeninitial, etc.
# initStress: stress of initial syllable
# singleStress: 1=word has only one stressed syllable, 0=word has at least two stressed syllables
# penultVowel: D=diphthong, M=monophthong
# penultCoda: closed, cluster, or open
# penultPossibleCoda: mayHaveCoda=penult ends in a singleton or cluster, or is followed by an onset cluster in the next syllable (which could be attracted to the penult as a coda should the penult be stressed)
# finalComplexOnset: is the onset of the final syllable complex?
# penultHeaviness: weight of penult syllable
# finalTwoV: final vowel divided into -i, -ah, and other
# finalVowel: D=diphthong, M=monophthong
# finalCoda: closed, cluster, or open
# finalHeaviness: weight of final syllable
# antepenultVowel: D=diphthong, M=monophthong
# antepenultCoda: closed, cluster, or open
# antepenultHeaviness: weight of antepenult
# final3stressTrans: stress of the final three syllables
######################################################
# Example of possible use:
#
# Question: how does syllable weight affect main stress placement?
table(data$weightPattern,data$mainStress)
table(data$weightPattern,data$final3stressTrans)
# In words at least three syllables long?
x=table(data$weightPattern[data$nsylls>2&grepl("NA",data$weightPattern)==FALSE],data$mainStress[data$nsylls>2&grepl("NA",data$weightPattern)==FALSE],exclude="other")
# List all HHL words with antepenult stress
data$spelling[data$weightPattern=="H H L"&data$mainStress=="antepenult"]
table(data$syllStruct_
_
table(data$syllStruct)
getOption("max.print")
getOption("max.print") = 1600
getOption("max.print") = c(1600)
getOption
getOption()
options("max.print")=1600
table(data$syllStruct)
options(max.print = 1600)
table(data$syllStruct)
table(data$syllStruct)
table(data$syllStruct[data$nsylls<3])
table(droplevels(data$syllStruct[data$nsylls<3]))
data$spelling[data$syllStruct=='CC.CL']
data$spelling[data$syllStruct=='CCC.CL']
#inside the quotes enter the path to the file on your machine
data=read.table("/Users/clairemoore-cantwell/Dropbox/Projects_finished/CanadaBanana/CorpusSearch/newCMU.txt",header=TRUE,colClasses=c('factor'),sep='\t')
#inside the quotes enter the path to the file on your machine
data=read.table("C:/Users/clairemoore-cantwell/Dropbox/Projects_finished/CanadaBanana/CorpusSearch/newCMU.txt",header=TRUE,colClasses=c('factor'),sep='\t')
#inside the quotes enter the path to the file on your machine
data=read.table("C:/Users/moore-cantwell/Dropbox/Projects_finished/CanadaBanana/CorpusSearch/newCMU.txt",header=TRUE,colClasses=c('factor'),sep='\t')
data$freq=as.numeric(levels(data$freq))[data$freq]
data$nsylls=sapply(as.character(data$stressTrans),nchar)
data$weightPattern=paste(data$penultWeight,data$finalWeight)
data$weightPattern=as.factor(data$weightPattern)
data$mainStress=factor(data$mainStress,levels=c("other","preante","antepenult","penult","final"),ordered=TRUE)
data$leftEdgeStress=sapply(data$stressTrans,function(v){
regexpr("1",as.character(v))[1]
})
data$initStress=substring(data$stressTrans,1,1)
data$singleStress=ifelse(grepl("2",data$stressTrans),0,1)
data$penultVowel[data$penultWeight!='other']=ifelse((data$penultWeight[data$penultWeight!='other'] %in% c("-LC","-LCC","-V")),"M","D")
data$penultCoda[data$penultWeight!='other']=ifelse((data$penultWeight[data$penultWeight!='other'] %in% c("-V","-VV")),"open",ifelse((data$penultWeight[data$penultWeight!='other'] %in% c("-LC","-TC")),"closed","cluster"))
data$penultCoda=as.factor(data$penultCoda)
data$penultVowel=as.factor(data$penultVowel)
data$penultPossibleCoda[data$penultWeight!='other']=ifelse((data$penultWeight[data$penultWeight!='other'] %in% c("-LC","-LCC","-TC","-TCC"))|(data$finalOnset[data$penultWeight!='other'] %in% c("CC","CCC")),"mayHaveCoda","noCoda")
data$penultPossibleCoda=as.factor(data$penultPossibleCoda)
data$finalComplexOnset=ifelse((data$finalOnset %in% c("CC","CCC")),"complex","simple")
data$finalComplexOnset=as.factor(data$finalComplexOnset)
#including tapestry words
#data$penultHeaviness=ifelse(data$penultPossibleCoda=='mayHaveCoda'|data$penultVowel=="D","H","L")
#data$penultHeaviness=as.factor(data$penultHeaviness)
#excluding tapestry words, including digestive words
#data$penultHeaviness=ifelse((data$penultPossibleCoda=='mayHaveCoda'&data$mainStress=='penult')|data$penultVowel=="D"|data$penultCoda=='closed'|data$penultCoda=='cluster',"H","L")
#data$penultHeaviness=as.factor(data$penultHeaviness)
#excluding tapestry words and digestive words
data$penultHeaviness=ifelse(data$penultVowel=="D"|data$penultCoda=='closed'|data$penultCoda=='cluster',"H","L")
data$penultHeaviness=as.factor(data$penultHeaviness)
data$finalTwoV=ifelse(data$finalV=='iy','iy',ifelse(data$finalV=='ah'|data$finalV=='ih','ah','other'))
data$finalVowel[data$finalWeight!='other']=ifelse((data$finalWeight[data$finalWeight!='other'] %in% c("-LC","-LCC","-V")),"M","D")
data$finalCoda[data$finalWeight!='other']=ifelse((data$finalWeight[data$finalWeight!='other'] %in% c("-V","-VV")),"open",ifelse((data$finalWeight[data$finalWeight!='other'] %in% c("-LC","-TC")),"closed","cluster"))
data$penultCoda=as.factor(data$penultCoda)
data$penultVowel=as.factor(data$penultVowel)
data$finalHeaviness=ifelse(data$finalVowel=="D"|data$finalCoda=='cluster',"H","L")
data$finalHeaviness=as.factor(data$finalHeaviness)
data$antepenultVowel[data$antepenultWeight!='other']=ifelse((data$antepenultWeight[data$antepenultWeight!='other'] %in% c("-LC","-LCC","-V")),"M","D")
data$antepenultCoda[data$antepenultWeight!='other']=ifelse((data$antepenultWeight[data$antepenultWeight!='other'] %in% c("-V","-VV")),"open",ifelse((data$antepenultWeight[data$antepenultWeight!='other'] %in% c("-LC","-TC")),"closed","cluster"))
data$penultCoda=as.factor(data$penultCoda)
data$penultVowel=as.factor(data$penultVowel)
data$antepenultHeaviness=ifelse(data$antepenultVowel=="D"|data$antepenultCoda=='closed'|data$antepenultCoda=='cluster',"H","L")
data$antepenultHeaviness=as.factor(data$antepenultHeaviness)
data$weightPattern=paste(data$antepenultHeaviness,data$penultHeaviness,data$finalHeaviness)
sapply(as.character(data$stressTrans),nchar)
final3<- function(string){
last3=substr(string,nchar(string)-2,nchar(string))
last3
}
data$final3stressTrans=as.factor(sapply(as.character(data$stressTrans),final3))
######################################################
########## Finished making new columns ###############
######################################################
summary(data)
# spelling
# transcription: CMU transcription
# stressTrans: CMU stress transcription
#				Here and elsewhere: 1=primary, 2=secondary, 0=no stress
# syllStruct: CV transcription of each syllable, separated by .'s.  L means lax vowel, T means tense
# syllabification: syllabification according to Maximal Onset.  Capitals are nucleii
# antepenultOnset: CV transcription of the onset of the antepenult syllable
# apStress: stress of the antepenult syllable
# penultHLweight: obsolete
# preantepenultHLweight: weight of the preantepenult
# finalHLweight: obsolete
# morphology: simple=morphologically simple; complex=morphologically complex
# vowelLength: mystery
# preantepenultWeight: weight of preantepenult broken down by rhyme type L is the same as V, and T is the same as V
# antepenultWeight: weight of antepenult broken down by rhyme type L is the same as V, and T is the same as V
# mainStress: location of the main stress of the word
# finalStress: stress of final syllable
# papStress: stress of preantepenult
# penultOnset: CV transcription of the penult onset
# suffixType: stress-shift type of the suffix
# penultWeight: weight of penult broken down by rhyme type L is the same as V, and T is the same as V
# antepenultHLweight: obsolete
# S: does the word's final cluster have an s in it?
# finalWeight: weight of final syllable broken down by rhyme type L is the same as V, and T is the same as V
# Suffix: is there a suffix?
# finalC: what's the final coda like?
# Prefix: prefix or not?
# prefixType: prefix stressed or not?
# finalOnset: CV transcription of the onset of the final syllable
# finalV: final vowel of the word
# penultStress: stress of the penult
# codaLength: how many phonemes in the final syllable's coda?
# coda: coda of the final syllable
# freq: log frequency from SubtLex
# POS: part of speech from CELEX
# nsylls: number of syllables
# weightPattern: Weight pattern of the last three syllables (NA in first position indicates a two syllable word)
# leftEdgeStress: 1 means initial stress, 2=peninitial, 3=postpeninitial, etc.
# initStress: stress of initial syllable
# singleStress: 1=word has only one stressed syllable, 0=word has at least two stressed syllables
# penultVowel: D=diphthong, M=monophthong
# penultCoda: closed, cluster, or open
# penultPossibleCoda: mayHaveCoda=penult ends in a singleton or cluster, or is followed by an onset cluster in the next syllable (which could be attracted to the penult as a coda should the penult be stressed)
# finalComplexOnset: is the onset of the final syllable complex?
# penultHeaviness: weight of penult syllable
# finalTwoV: final vowel divided into -i, -ah, and other
# finalVowel: D=diphthong, M=monophthong
# finalCoda: closed, cluster, or open
# finalHeaviness: weight of final syllable
# antepenultVowel: D=diphthong, M=monophthong
# antepenultCoda: closed, cluster, or open
# antepenultHeaviness: weight of antepenult
# final3stressTrans: stress of the final three syllables
######################################################
# Example of possible use:
#
# Question: how does syllable weight affect main stress placement?
table(data$weightPattern,data$mainStress)
table(data$weightPattern,data$final3stressTrans)
# In words at least three syllables long?
x=table(data$weightPattern[data$nsylls>2&grepl("NA",data$weightPattern)==FALSE],data$mainStress[data$nsylls>2&grepl("NA",data$weightPattern)==FALSE],exclude="other")
# List all HHL words with antepenult stress
data$spelling[data$weightPattern=="H H L"&data$mainStress=="antepenult"]
table(data$weightPattern,data$final3stressTrans)
102+79+148+64
79+1383+105+72
436+128+92+31
388+1998+58+42
102/393
79/393
148/393
64/393
388/2486
1998/2486
58/2486
42/2486
436/687
128/687
92/687
31/682
79/1639
1383/1639
105/1639
72/1639
.32/.19
.8-.58
.75-.58
.17/.22
.77*.8
.77*.58
.61+.44
.77*.8
.23*.58
.616+.1334
.77*.19
.23*.19
.77*.32
.23*.19
table(data$weightPattern[data$nsylls==3],data$final3stressTrans[data$nsylls==3])
113+4+1+11+2+86
4+1+36+153+14+7
128+377+70+7+30+125
15+8+7+1+1
414+4+12+6+4+1+28
29+1+61+303+37+1
442+4+770+138+7+61+23
442/1445
770/1445
63+19
63/82
19/82
414/469
12/469
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
binconf(0.5,10,method="wilson")
binconf(0.12,10,method="wilson")
binconf(0.07,10,method="wilson")
binconf(0.21,10,method="wilson")
binconf(0.32,10,method="wilson")
binconf(0.21,20,method="wilson")
?binconf
binconf(0.21*20,20,method="wilson")
binconf(0.32*20,20,method="wilson")
binconf(0.32*40,20,method="wilson")
binconf(0.32*40,40,method="wilson")
binconf(0.21*40,40,method="wilson")
binconf(0.21*40,50,method="wilson")
binconf(0.21*50,50,method="wilson")
binconf(0.21*60,60,method="wilson")
binconf(0.21*100,100,method="wilson")
binconf(0.53*10,10,method="wilson")
binconf(0.53*30,30,method="wilson")
binconf(0.75*30,30,method="wilson")
binconf(0.75*40,40,method="wilson")
binconf(0.53*40,40,method="wilson")
binconf(0.53*20,20,method="wilson")
binconf(0.75*20,20,method="wilson")
binconf(0.75*60,60,method="wilson")
binconf(0.53*60,60,method="wilson")
binconf(0.53*80,80,method="wilson")
binconf(0.75*80,80,method="wilson")
binconf(0.21*80,80,method="wilson")
binconf(0.32*80,80,method="wilson")
binconf(0.32*120,120,method="wilson")
binconf(0.21*120,120,method="wilson")
binconf(0.21*150,150,method="wilson")
binconf(0.32*150,150,method="wilson")
binconf(0.32*200,200,method="wilson")
binconf(0.21*200,200,method="wilson")
binconf(0.21*250,250,method="wilson")
binconf(0.32*250,250,method="wilson")
80*24
1920/2
960/3
0.4*0.4*.21*.21
.4*.5*.21*.25*.20*.25
reals = read.table("/Users/moore-cantwell/Dropbox/Projects_current/AMT_AFT/PilotTesting/schwaDurations/reals.txt",header=TRUE,sep='\t')
summary(reals$duration)
summary(reals$duration[reals$character=="tee"])
summary(reals$duration[reals$character=="boo"])
wugs = read.table("/Users/clairemoore-cantwell/Dropbox/Projects_current/AMT_AFT/PilotTesting/schwaDurations/boo_tee_wugs.txt",header=TRUE,sep='\t')
# Read in wugs schwa measurements here
wugs = read.table("/Users/moore-cantwell/Dropbox/Projects_current/AMT_AFT/PilotTesting/schwaDurations/boo_tee_wugs.txt",header=TRUE,sep='\t')
summary(wugs$duration[wugs$character=="boo"])
summary(wugs$duration[wugs$character=="tee"])
mean(49,29)
(49+29)/2
(47+69)/2
((.77/.58)-1)/((.3/.58)-1)
.77/.58
.3/.58
.6/.58
.32/.03
.32/.3
.32/.33
exp(-6.7)/(exp(-6.7)+exp(-2.6))
exp(-2.6)/(exp(-6.7)+exp(-2.6))
setwd("C:\Users\moore-cantwell")
setwd("C:/Users/moore-cantwell")
setwd("C:/Users/moore-cantwell/GSRs/Combo")
data = read.table("weights.txt")
data
plot(1:10000,data[1,])
plot(1:10000,data[,1])
summary(data)
plot(1:10000,data$V1,type="l")
points(1:10000,data$V2,type="l",col="red")
plot(1:10000,data$V1,type="l")
data = read.table("PFCs.txt")
data = read.table("PFCs.txt",header=TRUE)
summary(data)
plot(1:10000,data$pab21_pab)
plot(1:10000,data$pab21_pab,type="l")
plot(1:10000,data$a_a,type="l")
plot(1:10000,data$pab1_pab,type="l")
plot(1:10000,data$pab21_pap,type="l")
plot(1:10000,data$pab1_pab,type="l")
plot(1:10000,data$pab1_pap,type="l")
plot(1:10000,data$pab21_pab,type="l")
plot(1:10000,data$pab1_pap,type="l")
plot(1:10000,data$pab11_pap,type="l")
plot(1:10000,data$pab11_pab,type="l")
plot(1:10000,data$pab12_pab,type="l")
plot(1:10000,data$pab13_pab,type="l")
plot(1:10000,data$pab14_pab,type="l")
plot(1:10000,data$pab1_pab,type="l")
plot(1:10000,data$pab1_pap,type="l")
# Alternator
plot(1:10000,data$pab16_pab,type="l")
# Always voiceless
plot(1:10000,data$pab14_pap,type="l")
# Always voiceless
plot(1:10000,data$pab4_pap,type="l")
# Always voiceless
plot(1:10000,data$pab6_pap,type="l")
data = read.table("weights.txt")
plot(1:10000,data$V1,type="l")
points(1:10000,data$V2,type="l",col="red")
plot(1:10000,data$V1,type="l")
summary(data)
plot(1:10000,data$V1,type="l")
length(data$V1)
# Alternator
plot(1:10000,data$pab16_pab,type="l")
data = read.table("PFCs.txt",header=TRUE)
plot(1:10000,data$a_a,type="l")
data = read.table("PFCs.txt",header=TRUE)
length(data$a_a)
n = length(data[,1])
plot(1:n,data$a_a,type="l")
plot(1:n,data$a_a,type="l")
# Always voiced
plot(1:100,data$pab21_pab,type="l")
# Always voiceless
plot(1:100,data$pab6_pap,type="l")
# Alternator
plot(1:100,data$pab16_pab,type="l")
# Always voiceless
plot(1:100,data$pab6_pap,type="l")
# Always voiced
plot(1:100,data$pab21_pab,type="l")
# Alternator
plot(1:100,data$pab16_pab,type="l")
data = read.table("PFCs.txt",header=TRUE)
summary(data)
n = length(data[,1])
plot(1:n,data$a_a,type="l")
# Always voiced
plot(1:n,data$pab21_pab,type="l")
# Always voiceless
plot(1:n,data$pab6_pap,type="l")
# Alternator
plot(1:n,data$pab16_pab,type="l")
plot(1:n,data$a_a,type="l")
plot(1:n,data$a_a,type="l")
# Always voiced
plot(1:n,data$pab21_pab,type="l")
# Always voiceless
plot(1:n,data$pab6_pap,type="l")
# Alternator
plot(1:n,data$pab16_pab,type="l")
plot(1:n,data$pab16_pap,type="l")
# Always voiceless
plot(1:n,data$pab6_pap,type="l")
# Always voiced
plot(1:n,data$pab21_pab,type="l")
n=length(data$V1)
plot(1:n,data$V1,type="l")
data = read.table("weights.txt")
plot(1:n,data$V1,type="l")
data = read.table("weights.txt")
n=length(data$V1)
plot(1:n,data$V1,type="l")
points(1:n,data$V2,type="l",col="red")
plot(1:n,data$V2,type="l",col="red")
plot(1:n,data$V3,type="l",col="red")
data = read.table("PFCs.txt",header=TRUE)
summary(data)
